# Variables

# Get-ExecutionPolicy
# Restricted
# Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process
# Start-Service -Name "apache-tomcat-9.0.102-cloud-gateway"

$zipFilesLocation = $PSScriptRoot # path to current directory
$tomcatVersion = "9.0.102"
$cloudGatewayZip = "identityiq-CloudGateway-8.4.zip"
$cloudGatewayPatchZip = "IdentityIQCloudGateway-8.4p2.zip"
$tomcatZip = "apache-tomcat-${tomcatVersion}-windows-x64.zip"
$tomcatServiceName = "apache-tomcat-${tomcatVersion}-cloud-gateway"  # Simple service name
$tomcatServiceDisplayName = "Apache Tomcat ${tomcatVersion} with Cloud Gateway"  # Display name in Services

$javaHome = "C:\Program Files\Java\jdk-17"
$tomcatParentPath = "C:\temp"  # Parent directory where Tomcat will be installed
$tomcatHome = Join-Path $tomcatParentPath "apache-tomcat-$tomcatVersion"
$tempExtractPath = Join-Path $tomcatParentPath "temp_extract"

# List of configuration files to replace (only those with customizations)
$configFilesToReplace = @(
    "conf\server.xml",      # Has custom SSL and port configurations
    "conf\web.xml",         # Has custom servlet and filter configurations
    "conf\catalina.properties",  # Has custom properties
    "conf\logging.properties"    # Has custom logging settings
)

# Function to check if a file exists
function Test-FileExists {
    param (
        [string]$filePath
    )
    if (-not (Test-Path $filePath)) {
        Write-Host "Error: File not found - $filePath"
        exit 1
    }
}

# Check if required files exist
Test-FileExists "$zipFilesLocation\$tomcatZip"
Test-FileExists "$zipFilesLocation\$cloudGatewayZip"
Test-FileExists "$zipFilesLocation\$cloudGatewayPatchZip"

# Create parent directory if it doesn't exist
if (-not (Test-Path $tomcatParentPath)) {
    New-Item -ItemType Directory -Path $tomcatParentPath -Force | Out-Null
}

# Extract Tomcat
Write-Host "Extracting Tomcat..."
Expand-Archive -Path "$zipFilesLocation\$tomcatZip" -DestinationPath $tomcatParentPath -Force

# Unzip CloudGateway
Write-Host "Installing CloudGateway..."
New-Item -ItemType Directory -Path $tempExtractPath -Force | Out-Null
Expand-Archive -Path "$zipFilesLocation\$cloudGatewayZip" -DestinationPath $tempExtractPath -Force
$sourceWebapp = "$tempExtractPath\apache-tomcat-9.0.75\webapps\CloudGateway"
$destWebapp = "$tomcatHome\webapps\CloudGateway"
Copy-Item -Path $sourceWebapp -Destination $destWebapp -Recurse -Force

# Copy keystore from CloudGateway package
Write-Host "Copying keystore from CloudGateway package..."
$sourceKeystore = "$tempExtractPath\apache-tomcat-9.0.75\keystore"
$destKeystore = "$tomcatHome\keystore"
if (Test-Path $sourceKeystore) {
    Copy-Item -Path $sourceKeystore -Destination $destKeystore -Recurse -Force
    Write-Host "Keystore copied successfully"
} else {
    Write-Host "Error: Keystore directory not found in CloudGateway package"
    exit 1
}

# Replace configuration files
Write-Host "Replacing Tomcat configuration files..."
foreach ($configFile in $configFilesToReplace) {
    $sourceConfig = "$tempExtractPath\apache-tomcat-9.0.75\$configFile"
    $destConfig = "$tomcatHome\$configFile"
    if (Test-Path $sourceConfig) {
        Write-Host "Replacing $configFile..."
        Copy-Item -Path $sourceConfig -Destination $destConfig -Force
    } else {
        Write-Host "Warning: Configuration file $configFile not found in CloudGateway package"
    }
}

# Clean up temporary files
Write-Host "Cleaning up temporary files..."
Remove-Item -Path $tempExtractPath -Recurse -Force

# Apply CloudGateway patch
Write-Host "Applying CloudGateway patch..."
Expand-Archive -Path "$zipFilesLocation\$cloudGatewayPatchZip" -DestinationPath $destWebapp -Force

# Configure Tomcat service
Write-Host "Creating Tomcat service..."

# Set environment variables
$env:JAVA_HOME = $javaHome
$env:CATALINA_HOME = $tomcatHome
$env:CATALINA_BASE = $tomcatHome

# Install the service
Write-Host "Installing Tomcat service..."
Push-Location "$tomcatHome\bin"

# First remove any existing service with the same name
& .\service.bat remove $tomcatServiceName

# Install the service with our custom name
& .\service.bat install $tomcatServiceName

# Configure service properties
Write-Host "Configuring service properties..."
& .\tomcat9.exe "//US//${tomcatServiceName}" `
    --DisplayName="$tomcatServiceDisplayName" `
    --Description="Apache Tomcat ${tomcatVersion} with IdentityIQ Cloud Gateway 8.4p2" `
    --Startup=auto

Pop-Location

Write-Host "Service installed successfully! Don't forget to start the service." 

# Start the service
#Write-Host "Starting Tomcat service..."
#Start-Service -Name $tomcatServiceName

# Verify service status
# $serviceStatus = Get-Service -Name $tomcatServiceName
# if ($serviceStatus.Status -eq "Running") {
#     Write-Host "Tomcat service '${tomcatServiceName}' is running successfully."
#     Write-Host "Access the Cloud Gateway at: https://localhost:8443/CloudGateway"
#     Write-Host "Note: The default self-signed certificate is being used. For production use,"
#     Write-Host "      please configure proper SSL certificates as described in the documentation."
# } else {
#     Write-Host "Failed to start the service. Check the logs in ${tomcatHome}\logs for details."
# }

#Write-Host "Installation completed successfully!" 
